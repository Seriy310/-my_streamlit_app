import streamlit as st
import csv
import os
from datetime import datetime

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
st.set_page_config(page_title="–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –∫–∞–≤'—è—Ä–Ω—é", layout="centered")
st.title("–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –∫–∞–≤'—è—Ä–Ω—é")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∞—Ç–∫—ñ–≤ —É CSV —Ñ–∞–π–ª
def save_expenses(expenses):
    file_name = 'expenses_history.csv'
    with open(file_name, mode='a', newline='') as file:
        writer = csv.writer(file)
        if file.tell() == 0:  # –Ø–∫—â–æ —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π, –¥–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(["–ù–∞–∑–≤–∞", "–°—É–º–∞", "–î–∞—Ç–∞"])
        for expense in expenses:
            writer.writerow([expense['name'], expense['amount'], expense['date']])

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç —ñ–∑ —Ñ–∞–π–ª—É
if 'expenses' not in st.session_state:
    st.session_state.expenses = []
    if os.path.exists("expenses_history.csv"):
        with open("expenses_history.csv", newline='') as file:
            reader = csv.DictReader(file)
            for row in reader:
                st.session_state.expenses.append({
                    'name': row['–ù–∞–∑–≤–∞'],
                    'amount': round(float(row['–°—É–º–∞']) / 10) * 10,  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ –¥–µ—Å—è—Ç–∫—ñ–≤
                    'date': row['–î–∞—Ç–∞']
                })

# –í–∏–¥–∞—Ç–∫–∏
st.subheader("–í–∏–¥–∞—Ç–∫–∏:")
total_expenses = sum(float(exp['amount']) for exp in st.session_state.expenses)  # Ensure correct summation
st.write(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–¥–∞—Ç–∫—ñ–≤: {total_expenses:.2f} z≈Ç" if total_expenses > 0 else "–í–∏–¥–∞—Ç–∫—ñ–≤ –Ω–µ–º–∞—î")

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∏–¥–∞—Ç–∫—ñ–≤
if st.button("üìú –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ / –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏–¥–∞—Ç–∫—ñ–≤"):
    st.switch_page("pages/history.py")

# –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–¥–∞—Ç–∫—ñ–≤ (–¥–∏–Ω–∞–º—ñ—á–Ω–∞ —Ç–∞–±–ª–∏—Ü—è)
st.subheader("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –≤–∏–¥–∞—Ç–∫–∏")

if "new_expenses" not in st.session_state:
    st.session_state.new_expenses = [{"name": "", "amount": "", "date": datetime.today().strftime("%Y-%m-%d")}]

to_remove = []

for i, exp in enumerate(st.session_state.new_expenses):
    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
    name = col1.text_input(f"–ù–∞–∑–≤–∞ {i+1}", value=exp["name"], key=f"new_name_{i}")
    amount = col2.text_input(f"–°—É–º–∞ {i+1} (z≈Ç)", value=str(exp["amount"]), key=f"new_amount_{i}")
    date = col3.date_input(f"–î–∞—Ç–∞ {i+1}", value=datetime.strptime(exp["date"], "%Y-%m-%d"), key=f"new_date_{i}")
    
    if name.strip() and amount.strip():  # If filled, prepare for the next entry
        if i == len(st.session_state.new_expenses) - 1:
            st.session_state.new_expenses.append({"name": "", "amount": "", "date": datetime.today().strftime("%Y-%m-%d")})

    try:
        amount = round(float(amount.replace("z≈Ç", "").strip()) / 10) * 10
    except ValueError:
        amount = None
        st.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Ä—è–¥–∫—É {i+1}: –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

    st.session_state.new_expenses[i] = {"name": name, "amount": amount, "date": date.strftime("%Y-%m-%d")}

    delete_button = col4.button("‚ùå", key=f"remove_{i}")
    if delete_button:
        to_remove.append(i)

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
for index in sorted(to_remove, reverse=True):
    del st.session_state.new_expenses[index]

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∞—Ç–∫—ñ–≤
if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–¥–∞—Ç–∫–∏"):
    valid_expenses = [exp for exp in st.session_state.new_expenses if exp["name"] and exp["amount"]]
    
    if valid_expenses:
        st.session_state.expenses.extend(valid_expenses)
        save_expenses(valid_expenses)
        st.session_state.new_expenses = [{"name": "", "amount": "", "date": datetime.today().strftime("%Y-%m-%d")}]
        st.success("‚úÖ –í–∏–¥–∞—Ç–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        st.rerun()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è

# –ü–æ–¥–∞—Ç–æ–∫
st.subheader("–ü–æ–¥–∞—Ç–æ–∫:")
tax_percentage = st.number_input("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–¥–∞—Ç–∫—É:", min_value=0.0, max_value=100.0, value=5.0, step=0.5)
tax_amount = total_expenses * (tax_percentage / 100) if total_expenses > 0 else 0
st.write(f"–ü–æ–¥–∞—Ç–æ–∫ ({tax_percentage}%): {tax_amount:.2f} z≈Ç" if total_expenses > 0 else "–ü–æ–¥–∞—Ç–æ–∫ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–¥–∞—Ç–∫—ñ–≤.")

# –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫
st.subheader("–ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫:")
income = st.number_input("–í–≤–µ–¥—ñ—Ç—å —â–æ–º—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥ (–∑–ª–æ—Ç–∏—Ö):", min_value=0.0, step=100.0)

# –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ (–¥–∏–Ω–∞–º—ñ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
net_profit = income - total_expenses - tax_amount
st.write(f"üí∞ –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {net_profit:.2f} z≈Ç")
