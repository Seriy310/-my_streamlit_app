import streamlit as st
import os
import pandas as pd
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title="–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –∫–∞–≤'—è—Ä–Ω—é", layout="centered")
st.title("‚òï –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –∫–∞–≤'—è—Ä–Ω—é")

# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
file_name = "expenses_history.csv"
if not os.path.exists(file_name):
    df = pd.DataFrame(columns=["–ù–∞–∑–≤–∞", "–°—É–º–∞", "–î–∞—Ç–∞"])
    df.to_csv(file_name, index=False)
else:
    df = pd.read_csv(file_name)

df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors='coerce').dt.date  # –í–∏–¥–∞–ª—è—î–º–æ –≥–æ–¥–∏–Ω–∏
df["–°—É–º–∞"] = pd.to_numeric(df["–°—É–º–∞"], errors='coerce').fillna(0.0)  # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ float

# üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç (–ù–ï –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–∞)
total_expenses = df["–°—É–º–∞"].sum() if not df.empty else 0.0
st.subheader(f"üìâ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–¥–∞—Ç–∫—ñ–≤: {total_expenses:.2f} z≈Ç")

# üìú –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
col1, col2 = st.columns(2)
with col1:
    if st.button("üìú –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç"):
        st.switch_page("pages/history.py")

with col2:
    if st.button("üìà –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É"):
        st.switch_page("pages/analytics.py")

# ‚ûï –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –≤–∏–¥–∞—Ç–∫—ñ–≤
st.subheader("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –≤–∏–¥–∞—Ç–∫–∏")

if "new_expenses" not in st.session_state:
    st.session_state.new_expenses = [{"name": "", "amount": 0.0, "date": datetime.today().strftime("%Y-%m-%d")}]

to_remove = []

for i, exp in enumerate(st.session_state.new_expenses):
    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
    name = col1.text_input(f"–ù–∞–∑–≤–∞ {i+1}", value=exp["name"], key=f"new_name_{i}")
    amount = col2.number_input(f"–°—É–º–∞ {i+1}", value=exp["amount"], min_value=0.0, format="%.2f", key=f"new_amount_{i}")
    date = col3.date_input(f"–î–∞—Ç–∞ {i+1}", value=datetime.strptime(exp["date"], "%Y-%m-%d"), key=f"new_date_{i}")

    if name.strip() and amount > 0:  # –Ø–∫—â–æ –ø–æ–ª–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
        if i == len(st.session_state.new_expenses) - 1:
            st.session_state.new_expenses.append({"name": "", "amount": 0.0, "date": datetime.today().strftime("%Y-%m-%d")})

    st.session_state.new_expenses[i] = {"name": name, "amount": amount, "date": date.strftime("%Y-%m-%d")}

    delete_button = col4.button("‚ùå", key=f"remove_{i}")
    if delete_button:
        to_remove.append(i)

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
for index in sorted(to_remove, reverse=True):
    del st.session_state.new_expenses[index]

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∞—Ç–∫—ñ–≤
if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–¥–∞—Ç–∫–∏"):
    valid_expenses = [exp for exp in st.session_state.new_expenses if exp["name"] and exp["amount"] > 0]
    
    if valid_expenses:
        df_new = pd.DataFrame(valid_expenses)
        df_new["–°—É–º–∞"] = df_new["amount"]
        df_new["–î–∞—Ç–∞"] = df_new["date"]
        df_new = df_new.drop(columns=["amount", "date"])
        
        df = pd.concat([df, df_new], ignore_index=True)
        df.to_csv(file_name, index=False)
        
        st.session_state.new_expenses = [{"name": "", "amount": 0.0, "date": datetime.today().strftime("%Y-%m-%d")}]
        st.success("‚úÖ –í–∏–¥–∞—Ç–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        st.rerun()

# üìâ –ü–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
st.subheader("üìâ –ü–æ–¥–∞—Ç–æ–∫")
tax_percentage = st.number_input("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–¥–∞—Ç–∫—É:", min_value=0.0, max_value=100.0, value=5.0, step=0.5)
tax_amount = total_expenses * (tax_percentage / 100) if total_expenses > 0 else 0.0
st.write(f"–ü–æ–¥–∞—Ç–æ–∫ ({tax_percentage}%): {tax_amount:.2f} z≈Ç" if total_expenses > 0 else "–ü–æ–¥–∞—Ç–æ–∫ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–¥–∞—Ç–∫—ñ–≤.")

# üí∞ –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
st.subheader("üí∞ –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫")
income = st.number_input("–í–≤–µ–¥—ñ—Ç—å —â–æ–º—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥ (–∑–ª–æ—Ç–∏—Ö):", min_value=0.0, step=100.0)
net_profit = income - total_expenses - tax_amount
st.write(f"üí∞ –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {net_profit:.2f} z≈Ç")
